<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-05-05T00:42:15+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">grobob101的博客</title><subtitle>抽象从不抽象</subtitle><author><name>王国伟</name><email>2552831709@qq.com</email></author><entry><title type="html">Java从入门到入土 📚</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.html" rel="alternate" type="text/html" title="Java从入门到入土 📚" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.html"><![CDATA[<h1 id="java从入门到入土-">Java从入门到入土 📚</h1>

<h2 id="引言-">引言 🚀</h2>
<p>Java 是一种广泛使用的编程语言，适用于各种应用场景。本文将带你从 Java 的基础知识开始，逐步深入，直到掌握高级特性。</p>

<h2 id="基础语法-️">基础语法 🛠️</h2>
<p>Java 的基础语法包括变量、数据类型、控制结构等。以下是一个简单的 Java 程序示例：</p>]]></content><author><name>grobob101</name></author><category term="编程" /><category term="java" /><summary type="html"><![CDATA[Java从入门到入土 📚]]></summary></entry><entry><title type="html">Java多线程实战：从基础到高性能并发编程</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98.html" rel="alternate" type="text/html" title="Java多线程实战：从基础到高性能并发编程" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98.html"><![CDATA[<h1 id="java多线程核心概念">Java多线程核心概念</h1>

<h2 id="线程创建方式">线程创建方式</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 继承Thread类</span>
<span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程执行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 实现Runnable接口</span>
<span class="kd">class</span> <span class="nc">MyRunnable</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"任务执行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="线程同步机制">线程同步机制</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">synchronized关键字使用示例</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">count</span><span class="o">++;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="线程间通信">线程间通信</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 生产者-消费者模式</span>
<span class="nc">Object</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span>
<span class="kt">void</span> <span class="nf">produce</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="n">full</span><span class="o">)</span> <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
        <span class="c1">// 生产操作</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="并发工具类">并发工具类</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用Executor框架</span>
<span class="nc">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyTask</span><span class="o">());</span>
</code></pre></div></div>

<h1 id="典型问题与解决方案">典型问题与解决方案</h1>
<ol>
  <li><strong>死锁</strong>：通过资源有序申请避免</li>
  <li><strong>竞态条件</strong>：使用Atomic变量保证原子操作</li>
  <li><strong>线程泄漏</strong>：确保资源释放（如关闭Executor）</li>
</ol>]]></content><author><name>grobob101</name></author><category term="编程" /><category term="java" /><summary type="html"><![CDATA[Java多线程核心概念]]></summary></entry><entry><title type="html">Java开发框架实战：Spring Boot核心原理与微服务实践</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.html" rel="alternate" type="text/html" title="Java开发框架实战：Spring Boot核心原理与微服务实践" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.html"><![CDATA[<h1 id="spring-boot框架核心特性">Spring Boot框架核心特性</h1>

<h2 id="快速启动示例">快速启动示例</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 主程序入口</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="核心组件">核心组件</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 控制器示例</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hello Spring Boot!"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="自动配置机制">自动配置机制</h2>
<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># application.properties配置
</span><span class="py">server.port</span><span class="p">=</span><span class="s">8080</span>
<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:mysql://localhost:3306/test</span>
</code></pre></div></div>

<h1 id="微服务实践">微服务实践</h1>
<ol>
  <li><strong>服务注册</strong>：使用Spring Cloud与Eureka</li>
  <li><strong>配置中心</strong>：结合Spring Cloud Config</li>
  <li><strong>熔断机制</strong>：Hystrix断路器模式</li>
</ol>

<h1 id="常见问题">常见问题</h1>
<p>```java
// 解决Bean注入问题
@ComponentScan(basePackages = {“com.example”})</p>]]></content><author><name>grobob101</name></author><category term="编程" /><category term="java" /><summary type="html"><![CDATA[Spring Boot框架核心特性]]></summary></entry><entry><title type="html">Java虚拟机(JVM)深度解析：内存管理与性能调优</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html" rel="alternate" type="text/html" title="Java虚拟机(JVM)深度解析：内存管理与性能调优" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B/2025/05/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"><![CDATA[<h1 id="jvm内存结构">JVM内存结构</h1>

<h2 id="内存区域划分">内存区域划分</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 堆内存示例</span>
<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span> <span class="c1">// 对象存储在堆</span>

<span class="c1">// 栈帧存储局部变量</span>
<span class="kt">int</span> <span class="n">localVar</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</code></pre></div></div>

<h2 id="垃圾回收机制">垃圾回收机制</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 常见GC算法对比</span>
<span class="c1">// 标记-清除：可能导致内存碎片</span>
<span class="c1">// 复制算法：年轻代常用，减少碎片</span>
<span class="c1">// 标记-整理：老年代整理存活对象</span>
</code></pre></div></div>

<h2 id="内存溢出问题">内存溢出问题</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 堆溢出示例</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeapOOM</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="o">]);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="性能调优">性能调优</h1>
<ol>
  <li><strong>参数配置</strong>：<code class="language-plaintext highlighter-rouge">-Xms512m -Xmx2g -XX:MetaspaceSize=128m</code></li>
  <li><strong>GC日志分析</strong>：<code class="language-plaintext highlighter-rouge">-XX:+PrintGCDetails -Xlog:gc*</code></li>
  <li><strong>工具使用</strong>：VisualVM、JProfiler内存分析</li>
</ol>]]></content><author><name>grobob101</name></author><category term="编程" /><category term="java" /><summary type="html"><![CDATA[JVM内存结构]]></summary></entry><entry><title type="html">抽象练习生养成</title><link href="http://0.0.0.0:4000/2025/04/20/%E6%8A%BD%E8%B1%A1%E7%BB%83%E4%B9%A0%E7%94%9F%E5%85%BB%E6%88%90.html" rel="alternate" type="text/html" title="抽象练习生养成" /><published>2025-04-20T00:00:00+00:00</published><updated>2025-04-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/2025/04/20/%E6%8A%BD%E8%B1%A1%E7%BB%83%E4%B9%A0%E7%94%9F%E5%85%BB%E6%88%90</id><content type="html" xml:base="http://0.0.0.0:4000/2025/04/20/%E6%8A%BD%E8%B1%A1%E7%BB%83%E4%B9%A0%E7%94%9F%E5%85%BB%E6%88%90.html"><![CDATA[<h2 id="抽象从不是你的谎言而是你的真相">抽象从不是你的谎言，而是你的真相</h2>
<blockquote>
  <p>抽象是一种将复杂的事物简化为更简单、更易于理解的形式的过程。它允许我们从复杂的世界中提取出本质的特征和规律，从而更好地理解和解释这些事物。</p>

  <p>抽象的重要性在于它能够帮助我们发现问题的本质，从而找到解决问题的方法。它可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。</p>

  <p>抽象的过程通常包括以下几个步骤：</p>
  <ol>
    <li>识别问题：首先，我们需要识别问题的本质和特征。</li>
    <li>简化问题：然后，我们需要将问题简化为更简单的形式，以便更好地理解和解释。</li>
    <li>提取特征：接下来，我们需要从简化的问题中提取出本质的特征和规律。</li>
    <li>解释问题：最后，我们需要将提取出的特征和规律解释为问题的本质和解决方法。</li>
  </ol>

  <p>抽象的过程可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。它可以帮助我们发现问题的本质，从而找到解决问题的方法。
    抽象的过程通常包括以下几个步骤：</p>
</blockquote>]]></content><author><name>wgw</name></author><summary type="html"><![CDATA[抽象从不是你的谎言，而是你的真相 抽象是一种将复杂的事物简化为更简单、更易于理解的形式的过程。它允许我们从复杂的世界中提取出本质的特征和规律，从而更好地理解和解释这些事物。 抽象的重要性在于它能够帮助我们发现问题的本质，从而找到解决问题的方法。它可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。 抽象的过程通常包括以下几个步骤： 识别问题：首先，我们需要识别问题的本质和特征。 简化问题：然后，我们需要将问题简化为更简单的形式，以便更好地理解和解释。 提取特征：接下来，我们需要从简化的问题中提取出本质的特征和规律。 解释问题：最后，我们需要将提取出的特征和规律解释为问题的本质和解决方法。 抽象的过程可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。它可以帮助我们发现问题的本质，从而找到解决问题的方法。 抽象的过程通常包括以下几个步骤：]]></summary></entry></feed>