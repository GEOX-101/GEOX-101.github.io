<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://0.0.0.0:4000/" rel="alternate" type="text/html" /><updated>2025-05-07T06:38:49+00:00</updated><id>http://0.0.0.0:4000/feed.xml</id><title type="html">grobob101的博客</title><subtitle>抽象从不抽象</subtitle><author><name>王国伟</name><email>2552831709@qq.com</email></author><entry><title type="html">寻找旋转排序数组中的最小值</title><link href="http://0.0.0.0:4000/%E7%AE%97%E6%B3%95/2025/05/07/leetcode153%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%9C%80%E5%B0%8F%E5%80%BC.html" rel="alternate" type="text/html" title="寻找旋转排序数组中的最小值" /><published>2025-05-07T00:00:00+00:00</published><updated>2025-05-07T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%AE%97%E6%B3%95/2025/05/07/leetcode153%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%9C%80%E5%B0%8F%E5%80%BC</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%AE%97%E6%B3%95/2025/05/07/leetcode153%E5%AF%BB%E6%89%BE%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%9C%80%E5%B0%8F%E5%80%BC.html"><![CDATA[<p><a href="https://leetcode.cn/problems/find-minimum-in-rotated-sorted-array/description/?envType=study-plan-v2&amp;envId=top-100-liked">153. 寻找旋转排序数组中的最小值 - 力扣（LeetCode）</a></p>

<p>:::color2
题目描述：<br />
已知一个长度为 n 的数组，预先按照升序排列，经由 1 到 n 次 旋转 后，得到输入数组。例如，原数组 nums = [0,1,2,4,5,6,7] 在变化后可能得到：<br />
若旋转 4 次，则可以得到 [4,5,6,7,0,1,2]<br />
若旋转 7 次，则可以得到 [0,1,2,4,5,6,7]<br />
注意，数组 [a[0], a[1], a[2], …, a[n-1]] 旋转一次 的结果为数组 [a[n-1], a[0], a[1], a[2], …, a[n-2]] 。</p>

<p>给你一个元素值 互不相同 的数组 nums ，它原来是一个升序排列的数组，并按上述情形进行了多次旋转。请你找出并返回数组中的 最小元素 。</p>

<p>你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</p>

<p>:::</p>

<pre><code class="language-plain">示例 1：
输入：nums = [3,4,5,1,2]
输出：1
解释：原数组为 [1,2,3,4,5] ，旋转 3 次得到输入数组。
示例 2：
输入：nums = [4,5,6,7,0,1,2]
输出：0
解释：原数组为 [0,1,2,4,5,6,7] ，旋转 4 次得到输入数组。
</code></pre>

<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">class</span> <span class="nc">Solution</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="nf">findMin</span><span class="o">(</span><span class="kt">int</span><span class="o">[]</span> <span class="n">nums</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">int</span> <span class="n">l</span><span class="o">=</span><span class="mi">0</span><span class="o">,</span><span class="n">r</span><span class="o">=</span><span class="n">nums</span><span class="o">.</span><span class="na">length</span><span class="o">-</span><span class="mi">1</span><span class="o">;</span>
        <span class="k">while</span><span class="o">(</span><span class="n">l</span><span class="o">&lt;</span><span class="n">r</span><span class="o">){</span>
            <span class="kt">int</span> <span class="n">mid</span><span class="o">=(</span><span class="n">l</span><span class="o">+</span><span class="n">r</span><span class="o">)&gt;&gt;</span><span class="mi">1</span><span class="o">;</span>
            <span class="k">if</span><span class="o">(</span><span class="n">nums</span><span class="o">[</span><span class="n">mid</span><span class="o">]&lt;=</span><span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">]){</span>
                <span class="n">r</span><span class="o">=</span><span class="n">mid</span><span class="o">;</span>
            <span class="o">}</span><span class="k">else</span><span class="o">{</span>
                <span class="n">l</span><span class="o">=</span><span class="n">mid</span><span class="o">+</span><span class="mi">1</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">nums</span><span class="o">[</span><span class="n">r</span><span class="o">];</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<p><strong>代码解释</strong></p>

<p>:::warning
初始化两个指针：l指向数组的起始位置，r指向数组的末尾位置。</p>

<p>使用while循环进行二分查找，直到l和r相遇：</p>

<p>计算中间位置mid，即(l + r) » 1（相当于(l + r) / 2）<br />
如果nums[mid]小于等于nums[r]，说明最小值在左半&gt;部分，将r移动到mid位置<br />
否则，说明最小值在右半部分，将l移动到mid + 1位置<br />
当循环结束时，l和r指向同一个位置，这个位置就是最&gt;小值所在的位置，返回nums[r]即可。</p>

<p>:::</p>]]></content><author><name>grobob101</name></author><category term="算法" /><category term="分治" /><summary type="html"><![CDATA[153. 寻找旋转排序数组中的最小值 - 力扣（LeetCode）]]></summary></entry><entry><title type="html">多线程实战</title><link href="http://0.0.0.0:4000/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2025/05/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98.html" rel="alternate" type="text/html" title="多线程实战" /><published>2025-05-06T00:00:00+00:00</published><updated>2025-05-06T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2025/05/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98</id><content type="html" xml:base="http://0.0.0.0:4000/%E5%A4%9A%E7%BA%BF%E7%A8%8B/2025/05/06/%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98.html"><![CDATA[<h1 id="java-aqsabstractqueuedsynchronizer详解">Java AQS（AbstractQueuedSynchronizer）详解</h1>

<p>本文深入探讨Java中的AQS（AbstractQueuedSynchronizer），涵盖以下内容：</p>

<h2 id="1-aqs概述">1. AQS概述</h2>

<p>AQS是Java并发包中的核心组件，用于构建锁和同步器的基础框架。它通过一个FIFO队列管理线程的排队，并提供了一套标准的API来实现各种同步工具，如ReentrantLock、CountDownLatch等。</p>

<hr />

<h2 id="2-管理状态方法">2. 管理状态方法</h2>

<p>AQS使用一个<code class="language-plaintext highlighter-rouge">volatile int state</code>变量表示同步状态，以下是三个核心方法：</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">getState()</code></strong><br />
获取当前同步状态。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">setState(int newState)</code></strong><br />
设置同步状态，直接修改<code class="language-plaintext highlighter-rouge">state</code>值。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">compareAndSetState(int expect, int update)</code></strong><br />
使用CAS操作原子性地更新状态。</p>
  </li>
</ul>

<hr />

<h2 id="3-可重写方法">3. 可重写方法</h2>

<p>AQS提供了以下五个可重写的方法，子类需要根据需求实现这些方法：</p>

<ul>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">tryAcquire(int arg)</code></strong><br />
尝试获取独占锁。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">tryRelease(int arg)</code></strong><br />
尝试释放独占锁。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">tryAcquireShared(int arg)</code></strong><br />
尝试获取共享锁。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">tryReleaseShared(int arg)</code></strong><br />
尝试释放共享锁。</p>
  </li>
  <li>
    <p><strong><code class="language-plaintext highlighter-rouge">isHeldExclusively()</code></strong><br />
判断当前线程是否持有独占锁。</p>
  </li>
</ul>

<hr />

<h2 id="4-模板方法">4. 模板方法</h2>

<p>AQS提供了一系列模板方法，供开发者直接调用：</p>

<ul>
  <li><strong>独占模式</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">acquire(int arg)</code>：阻塞获取独占锁。</li>
      <li><code class="language-plaintext highlighter-rouge">acquireInterruptibly(int arg)</code>：可中断地获取独占锁。</li>
      <li><code class="language-plaintext highlighter-rouge">tryAcquireNanos(int arg, long nanosTimeout)</code>：带超时的获取独占锁。</li>
      <li><code class="language-plaintext highlighter-rouge">release(int arg)</code>：释放独占锁。</li>
    </ul>
  </li>
  <li><strong>共享模式</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">acquireShared(int arg)</code>：阻塞获取共享锁。</li>
      <li><code class="language-plaintext highlighter-rouge">acquireSharedInterruptibly(int arg)</code>：可中断地获取共享锁。</li>
      <li><code class="language-plaintext highlighter-rouge">tryAcquireSharedNanos(int arg, long nanosTimeout)</code>：带超时的获取共享锁。</li>
      <li><code class="language-plaintext highlighter-rouge">releaseShared(int arg)</code>：释放共享锁。</li>
    </ul>
  </li>
  <li><strong>其他工具方法</strong>
    <ul>
      <li><code class="language-plaintext highlighter-rouge">getQueueThreads()</code>：获取等待队列中的线程。</li>
      <li><code class="language-plaintext highlighter-rouge">owns(ConditionObject condition)</code>：判断条件队列是否属于当前同步器。</li>
    </ul>
  </li>
</ul>

<hr />

<h2 id="5-方法协作流程">5. 方法协作流程</h2>

<p>以下是AQS的工作流程：</p>

<ol>
  <li>线程尝试通过<code class="language-plaintext highlighter-rouge">tryAcquire</code>或<code class="language-plaintext highlighter-rouge">tryAcquireShared</code>获取锁。</li>
  <li>如果获取失败，则将线程加入等待队列。</li>
  <li>等待队列中的线程通过自旋或阻塞等待被唤醒。</li>
  <li>唤醒后重新尝试获取锁，直到成功。</li>
</ol>]]></content><author><name>grobob101</name></author><category term="多线程" /><category term="并发" /><summary type="html"><![CDATA[Java AQS（AbstractQueuedSynchronizer）详解]]></summary></entry><entry><title type="html">一个网络连接的奇妙旅程</title><link href="http://0.0.0.0:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2025/05/05/%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84.html" rel="alternate" type="text/html" title="一个网络连接的奇妙旅程" /><published>2025-05-05T00:00:00+00:00</published><updated>2025-05-05T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2025/05/05/%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84</id><content type="html" xml:base="http://0.0.0.0:4000/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C/2025/05/05/%E4%B8%80%E4%B8%AA%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E6%98%AF%E6%80%8E%E4%B9%88%E8%A2%AB%E5%A4%84%E7%90%86%E7%9A%84.html"><![CDATA[<h1 id="-一个网络连接的奇妙旅程">🚀 一个网络连接的奇妙旅程</h1>

<h2 id="-服务端城堡的诞生">🏰 服务端城堡的诞生</h2>

<p><strong>场景</strong>：服务端守护者在80端口城堡门口点亮灯笼（<code class="language-plaintext highlighter-rouge">socket()</code>创建套接字）：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">sockfd</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
</code></pre></div></div>

<p><strong>守护者动作</strong>：用魔法将灯笼绑在80号城门（<code class="language-plaintext highlighter-rouge">bind()</code>绑定端口）：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">struct</span> <span class="n">sockaddr_in</span> <span class="n">server_addr</span> <span class="o">=</span> <span class="p">{</span> 
    <span class="p">.</span><span class="n">sin_family</span> <span class="o">=</span> <span class="n">AF_INET</span><span class="p">,</span>
    <span class="p">.</span><span class="n">sin_port</span> <span class="o">=</span> <span class="n">htons</span><span class="p">(</span><span class="mi">80</span><span class="p">),</span>
    <span class="p">.</span><span class="n">sin_addr</span><span class="p">.</span><span class="n">s_addr</span> <span class="o">=</span> <span class="n">INADDR_ANY</span> 
<span class="p">};</span>
<span class="n">bind</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="p">(</span><span class="k">struct</span> <span class="n">sockaddr</span><span class="o">*</span><span class="p">)</span><span class="o">&amp;</span><span class="n">server_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">server_addr</span><span class="p">));</span>
</code></pre></div></div>

<h2 id="-监听的开始">🎧 监听的开始</h2>

<p><strong>守护者吟唱</strong>：启动监听模式（<code class="language-plaintext highlighter-rouge">listen()</code>设置队列），允许最多50个骑士等待：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">listen</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="mi">50</span><span class="p">);</span> <span class="c1">// 队列最大容纳50位骑士</span>
</code></pre></div></div>

<h2 id="-客户端骑士的敲门">🚪 客户端骑士的敲门</h2>

<p><strong>骑士行动</strong>：客户端骑士从远方（<code class="language-plaintext highlighter-rouge">connect()</code>）发起冲锋：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">client_sock</span> <span class="o">=</span> <span class="n">socket</span><span class="p">(</span><span class="n">AF_INET</span><span class="p">,</span> <span class="n">SOCK_STREAM</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span>
<span class="n">connect</span><span class="p">(</span><span class="n">client_sock</span><span class="p">,</span> <span class="n">server_addr</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">server_addr</span><span class="p">));</span>
</code></pre></div></div>

<h2 id="-守护者的三重检查">🔒 守护者的三重检查</h2>

<ol>
  <li><strong>端口检查</strong>：确认80号城门已点亮灯笼（是否调用<code class="language-plaintext highlighter-rouge">listen</code>）</li>
  <li><strong>队列检查</strong>：查看等待区是否已满（队列长度是否达上限）</li>
  <li><strong>攻击检测</strong>：
    <ul>
      <li><strong>SYN洪水攻击</strong>：突然涌来1000个骑士却不愿进入（半连接队列溢出）</li>
      <li><strong>恶意连接</strong>：伪装成骑士实则是狼群（需要防火墙拦截）</li>
    </ul>
  </li>
</ol>

<h2 id="️-接受连接的魔法">🛡️ 接受连接的魔法</h2>

<p>当骑士通过检查，守护者施展<code class="language-plaintext highlighter-rouge">accept()</code>魔法：</p>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">new_sock</span> <span class="o">=</span> <span class="n">accept</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span> <span class="c1">// 获取新连接通道</span>
</code></pre></div></div>
<p>此刻：</p>
<ul>
  <li>新通道<code class="language-plaintext highlighter-rouge">new_sock</code>记录骑士的所有信息（IP、端口）</li>
  <li>队列中移除该骑士（腾出位置给新骑士）</li>
</ul>

<hr />

<h2 id="-不同io模型的处理艺术">🌍 不同IO模型的处理艺术</h2>

<h3 id="-select模式轮询巡查">🔄 Select模式（轮询巡查）</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">FD_SET</span><span class="p">(</span><span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">readfds</span><span class="p">);</span>
<span class="n">select</span><span class="p">(</span><span class="n">max_fd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">readfds</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>
</code></pre></div></div>
<p><strong>流程</strong>：</p>
<ol>
  <li>守护者每5秒环顾所有城门（轮询）</li>
  <li>发现新骑士时处理（效率低，适合少量连接）</li>
</ol>

<h3 id="-epoll模式智能信使">🚀 Epoll模式（智能信使）</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">epoll_ctl</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">EPOLL_CTL_ADD</span><span class="p">,</span> <span class="n">sockfd</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ev</span><span class="p">);</span>
<span class="n">epoll_wait</span><span class="p">(</span><span class="n">epoll_fd</span><span class="p">,</span> <span class="n">events</span><span class="p">,</span> <span class="n">MAX_EVENTS</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">);</span>
</code></pre></div></div>
<p><strong>流程</strong>：</p>
<ol>
  <li>安排信使监视所有城门</li>
  <li>信使主动报告有骑士到达（高效处理成千上万连接）</li>
</ol>

<h3 id="-reactor模式反应堆">⚡ Reactor模式（反应堆）</h3>
<div class="language-c highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dispatcher</span><span class="p">.</span><span class="n">dispatch</span><span class="p">(</span><span class="n">new</span> <span class="nf">ConnectionEvent</span><span class="p">());</span>
</code></pre></div></div>
<p><strong>流程</strong>：</p>
<ol>
  <li>主线程监听所有事件</li>
  <li>事件到达时派发给工作线程处理</li>
</ol>

<hr />

<h2 id="-技术要点总结">📝 技术要点总结</h2>

<table>
  <thead>
    <tr>
      <th>阶段</th>
      <th>关键函数</th>
      <th>安全机制</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td>建立连接</td>
      <td>socket()</td>
      <td>防火墙IP过滤</td>
    </tr>
    <tr>
      <td>绑定端口</td>
      <td>bind()</td>
      <td>端口白名单</td>
    </tr>
    <tr>
      <td>开始监听</td>
      <td>listen()</td>
      <td>SYN Cookies防御洪水</td>
    </tr>
    <tr>
      <td>接受连接</td>
      <td>accept()</td>
      <td>TLS加密通道</td>
    </tr>
  </tbody>
</table>

<hr />

<h2 id="-结语">🌟 结语</h2>
<p>每个连接就像一位骑士的朝圣之旅，服务端城堡用不同的策略（select/epoll）守护着网络安全，确保每一份数据都能安全抵达目的地！</p>]]></content><author><name>grobob101</name></author><category term="计算机网络" /><category term="网络" /><summary type="html"><![CDATA[🚀 一个网络连接的奇妙旅程]]></summary></entry><entry><title type="html">Java从入门到入土 📚</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.html" rel="alternate" type="text/html" title="Java从入门到入土 📚" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E5%85%A5%E5%9C%9F.html"><![CDATA[<h1 id="java从入门到入土-">Java从入门到入土 📚</h1>

<h2 id="引言-">引言 🚀</h2>
<p>Java 是一种广泛使用的编程语言，适用于各种应用场景。本文将带你从 Java 的基础知识开始，逐步深入，直到掌握高级特性。</p>

<h2 id="基础语法-️">基础语法 🛠️</h2>
<p>Java 的基础语法包括变量、数据类型、控制结构等。以下是一个简单的 Java 程序示例：</p>]]></content><author><name>grobob101</name></author><category term="编程语言" /><category term="java" /><summary type="html"><![CDATA[Java从入门到入土 📚]]></summary></entry><entry><title type="html">Java多线程实战：从基础到高性能并发编程</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98.html" rel="alternate" type="text/html" title="Java多线程实战：从基础到高性能并发编程" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E5%A4%9A%E7%BA%BF%E7%A8%8B%E5%AE%9E%E6%88%98.html"><![CDATA[<h1 id="java多线程核心概念">Java多线程核心概念</h1>

<h2 id="线程创建方式">线程创建方式</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 继承Thread类</span>
<span class="kd">class</span> <span class="nc">MyThread</span> <span class="kd">extends</span> <span class="nc">Thread</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"线程执行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
<span class="c1">// 实现Runnable接口</span>
<span class="kd">class</span> <span class="nc">MyRunnable</span> <span class="kd">implements</span> <span class="nc">Runnable</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">run</span><span class="o">()</span> <span class="o">{</span>
        <span class="nc">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"任务执行"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="线程同步机制">线程同步机制</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">synchronized关键字使用示例</span><span class="err">：</span>
<span class="kd">public</span> <span class="kd">synchronized</span> <span class="kt">void</span> <span class="nf">increment</span><span class="o">()</span> <span class="o">{</span>
    <span class="n">count</span><span class="o">++;</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="线程间通信">线程间通信</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 生产者-消费者模式</span>
<span class="nc">Object</span> <span class="n">lock</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">Object</span><span class="o">();</span>
<span class="kt">void</span> <span class="nf">produce</span><span class="o">()</span> <span class="o">{</span>
    <span class="kd">synchronized</span><span class="o">(</span><span class="n">lock</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">while</span><span class="o">(</span><span class="n">full</span><span class="o">)</span> <span class="n">lock</span><span class="o">.</span><span class="na">wait</span><span class="o">();</span>
        <span class="c1">// 生产操作</span>
        <span class="n">lock</span><span class="o">.</span><span class="na">notify</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="并发工具类">并发工具类</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 使用Executor框架</span>
<span class="nc">ExecutorService</span> <span class="n">executor</span> <span class="o">=</span> <span class="nc">Executors</span><span class="o">.</span><span class="na">newFixedThreadPool</span><span class="o">(</span><span class="mi">4</span><span class="o">);</span>
<span class="n">executor</span><span class="o">.</span><span class="na">submit</span><span class="o">(</span><span class="k">new</span> <span class="nc">MyTask</span><span class="o">());</span>
</code></pre></div></div>

<h1 id="典型问题与解决方案">典型问题与解决方案</h1>
<ol>
  <li><strong>死锁</strong>：通过资源有序申请避免</li>
  <li><strong>竞态条件</strong>：使用Atomic变量保证原子操作</li>
  <li><strong>线程泄漏</strong>：确保资源释放（如关闭Executor）</li>
</ol>]]></content><author><name>grobob101</name></author><category term="编程语言" /><category term="java" /><summary type="html"><![CDATA[Java多线程核心概念]]></summary></entry><entry><title type="html">Java开发框架实战：Spring Boot核心原理与微服务实践</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.html" rel="alternate" type="text/html" title="Java开发框架实战：Spring Boot核心原理与微服务实践" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E5%BC%80%E5%8F%91%E6%A1%86%E6%9E%B6%E8%AF%A6%E8%A7%A3.html"><![CDATA[<h1 id="spring-boot框架核心特性">Spring Boot框架核心特性</h1>

<h2 id="快速启动示例">快速启动示例</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 主程序入口</span>
<span class="nd">@SpringBootApplication</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Application</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">SpringApplication</span><span class="o">.</span><span class="na">run</span><span class="o">(</span><span class="nc">Application</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">args</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="核心组件">核心组件</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 控制器示例</span>
<span class="nd">@RestController</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HelloController</span> <span class="o">{</span>
    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">"/hello"</span><span class="o">)</span>
    <span class="kd">public</span> <span class="nc">String</span> <span class="nf">sayHello</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="s">"Hello Spring Boot!"</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h2 id="自动配置机制">自动配置机制</h2>
<div class="language-properties highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c"># application.properties配置
</span><span class="py">server.port</span><span class="p">=</span><span class="s">8080</span>
<span class="py">spring.datasource.url</span><span class="p">=</span><span class="s">jdbc:mysql://localhost:3306/test</span>
</code></pre></div></div>

<h1 id="微服务实践">微服务实践</h1>
<ol>
  <li><strong>服务注册</strong>：使用Spring Cloud与Eureka</li>
  <li><strong>配置中心</strong>：结合Spring Cloud Config</li>
  <li><strong>熔断机制</strong>：Hystrix断路器模式</li>
</ol>

<h1 id="常见问题">常见问题</h1>
<p>```java
// 解决Bean注入问题
@ComponentScan(basePackages = {“com.example”})</p>]]></content><author><name>grobob101</name></author><category term="编程语言" /><category term="java" /><summary type="html"><![CDATA[Spring Boot框架核心特性]]></summary></entry><entry><title type="html">Java虚拟机(JVM)深度解析：内存管理与性能调优</title><link href="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html" rel="alternate" type="text/html" title="Java虚拟机(JVM)深度解析：内存管理与性能调优" /><published>2025-05-03T00:00:00+00:00</published><updated>2025-05-03T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86</id><content type="html" xml:base="http://0.0.0.0:4000/%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80/2025/05/03/java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86.html"><![CDATA[<h1 id="jvm内存结构">JVM内存结构</h1>

<h2 id="内存区域划分">内存区域划分</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 堆内存示例</span>
<span class="nc">String</span> <span class="n">str</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">String</span><span class="o">(</span><span class="s">"Hello"</span><span class="o">);</span> <span class="c1">// 对象存储在堆</span>

<span class="c1">// 栈帧存储局部变量</span>
<span class="kt">int</span> <span class="n">localVar</span> <span class="o">=</span> <span class="mi">42</span><span class="o">;</span>
</code></pre></div></div>

<h2 id="垃圾回收机制">垃圾回收机制</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 常见GC算法对比</span>
<span class="c1">// 标记-清除：可能导致内存碎片</span>
<span class="c1">// 复制算法：年轻代常用，减少碎片</span>
<span class="c1">// 标记-整理：老年代整理存活对象</span>
</code></pre></div></div>

<h2 id="内存溢出问题">内存溢出问题</h2>
<div class="language-java highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 堆溢出示例</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">HeapOOM</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="nc">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="nc">List</span><span class="o">&lt;</span><span class="kt">byte</span><span class="o">[]&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="nc">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="k">while</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span> <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="k">new</span> <span class="kt">byte</span><span class="o">[</span><span class="mi">1024</span><span class="o">*</span><span class="mi">1024</span><span class="o">]);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div></div>

<h1 id="性能调优">性能调优</h1>
<ol>
  <li><strong>参数配置</strong>：<code class="language-plaintext highlighter-rouge">-Xms512m -Xmx2g -XX:MetaspaceSize=128m</code></li>
  <li><strong>GC日志分析</strong>：<code class="language-plaintext highlighter-rouge">-XX:+PrintGCDetails -Xlog:gc*</code></li>
  <li><strong>工具使用</strong>：VisualVM、JProfiler内存分析</li>
</ol>]]></content><author><name>grobob101</name></author><category term="编程语言" /><category term="java" /><summary type="html"><![CDATA[JVM内存结构]]></summary></entry><entry><title type="html">抽象从不是你的谎言，而是你的真相</title><link href="http://0.0.0.0:4000/%E6%97%A5%E5%B8%B8/2025/04/20/%E6%8A%BD%E8%B1%A1%E7%BB%83%E4%B9%A0%E7%94%9F%E5%85%BB%E6%88%90.html" rel="alternate" type="text/html" title="抽象从不是你的谎言，而是你的真相" /><published>2025-04-20T00:00:00+00:00</published><updated>2025-04-20T00:00:00+00:00</updated><id>http://0.0.0.0:4000/%E6%97%A5%E5%B8%B8/2025/04/20/%E6%8A%BD%E8%B1%A1%E7%BB%83%E4%B9%A0%E7%94%9F%E5%85%BB%E6%88%90</id><content type="html" xml:base="http://0.0.0.0:4000/%E6%97%A5%E5%B8%B8/2025/04/20/%E6%8A%BD%E8%B1%A1%E7%BB%83%E4%B9%A0%E7%94%9F%E5%85%BB%E6%88%90.html"><![CDATA[<h2 id="抽象从不是你的谎言而是你的真相">抽象从不是你的谎言，而是你的真相</h2>
<blockquote>
  <p>抽象是一种将复杂的事物简化为更简单、更易于理解的形式的过程。它允许我们从复杂的世界中提取出本质的特征和规律，从而更好地理解和解释这些事物。</p>

  <p>抽象的重要性在于它能够帮助我们发现问题的本质，从而找到解决问题的方法。它可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。</p>

  <p>抽象的过程通常包括以下几个步骤：</p>
  <ol>
    <li>识别问题：首先，我们需要识别问题的本质和特征。</li>
    <li>简化问题：然后，我们需要将问题简化为更简单的形式，以便更好地理解和解释。</li>
    <li>提取特征：接下来，我们需要从简化的问题中提取出本质的特征和规律。</li>
    <li>解释问题：最后，我们需要将提取出的特征和规律解释为问题的本质和解决方法。</li>
  </ol>

  <p>抽象的过程可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。它可以帮助我们发现问题的本质，从而找到解决问题的方法。</p>
</blockquote>]]></content><author><name>wgw</name></author><category term="日常" /><category term="日常" /><summary type="html"><![CDATA[抽象从不是你的谎言，而是你的真相 抽象是一种将复杂的事物简化为更简单、更易于理解的形式的过程。它允许我们从复杂的世界中提取出本质的特征和规律，从而更好地理解和解释这些事物。 抽象的重要性在于它能够帮助我们发现问题的本质，从而找到解决问题的方法。它可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。 抽象的过程通常包括以下几个步骤： 识别问题：首先，我们需要识别问题的本质和特征。 简化问题：然后，我们需要将问题简化为更简单的形式，以便更好地理解和解释。 提取特征：接下来，我们需要从简化的问题中提取出本质的特征和规律。 解释问题：最后，我们需要将提取出的特征和规律解释为问题的本质和解决方法。 抽象的过程可以帮助我们更好地理解和解释复杂的现象，从而更好地解决问题。它可以帮助我们发现问题的本质，从而找到解决问题的方法。]]></summary></entry></feed>